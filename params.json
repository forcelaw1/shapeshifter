{"name":"Shapeshifter","tagline":"Protocol Buffers to JSON bridge","body":"Shapeshifter\r\n============\r\n\r\nShapeshifter is a library that bridges the gap between Protocol Buffers and JSON, for the purpose of building robust APIs whose payloads are well-defined and documented.\r\n\r\nProtocol Buffers provide an extremely compact, backward and forward-compatible serialization mechanism that is well-suited for machine to machine communication. On the other hand, JSON is the native data format for all parts of the modern web toolchain.\r\n\r\nShapeshifter lets you re-use messages defined as protobufs in your web service by exposing them as JSON objects. We hope you'll find Shapeshifter as useful as we have when developing our latest-generation web services. Either way, feel free to drop a line on the mailing list or file a bug on the tracker.\r\n\r\nUsage\r\n-----\r\n\r\nAssuming there exists a Protocol Buffer message defined as such:\r\n\r\n\tmessage Person {\r\n\t\toptional string name = 1;\r\n\t\toptional int32 age = 2;\r\n\t\toptional string city = 3;\r\n\t}\r\n\r\nYou may declare a schema \r\n\r\n\tNamedSchema personSchema = NamedSchema.of(Person.getDescriptor(), \"Person\");\r\n\r\nSerialization\r\n-------------\r\n\r\nOnce a schema is defined, you may want to create an object for generating JSON:\r\n\r\n\tSerializer personSerializer = personSchema.getSerializer();\r\n\tPerson biebs = Person.newBuilder().setName(\"Justin Bieber\").build();\r\n\tJsonNode node = personSerializer.serialize(biebs);\r\n\r\nThe resulting node's notation will be:\r\n\r\n\t{\r\n\t\t\"name\": \"Justin Bieber\",\r\n\t}\r\n\r\nParsing\r\n-------\r\n\r\nConversely, schemas are able to validate and parse JSON content into Protocol Buffers messages:\r\n\r\n\tParser personParser = personSchema.getParser();\r\n\tPerson parsedBiebs = Person.newBuilder().mergeFrom(personParser.parse(node)).build();\r\n\r\nConfigurability\r\n---------------\r\n\r\nSchemas are configurable â€” you may want to transform values and names, avoid surfacing certain confidential fields and even create map-like JSON constructs. Read the full Javadoc to find out the available options.\r\n\r\nJSON-Schema\r\n-----------\r\n\r\nMoreover, Shapeshifter supports the JSON-Schema specification and is able to derive the set of schemas from your Protocol Buffer messages. The library contains a message definition that represents a JSON-Schema and, as a proof of concept, Shapeshifter uses itself to define a schema compliant with the specification:\r\n\r\n\tJsonSchema personJsonSchema = personSchema.getJsonSchema();\r\n\tJsonNode node = JsonSchemas.SCHEMA.getSerializer().serialize(personJsonSchema);\r\n\r\nWill yield:\r\n\r\n\t{\r\n\t\t\"id\": \"Person\",\r\n\t\t\"type\": \"object\",\r\n\t\t\"properties\": {\r\n\t\t\t\"name\": {\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\nLicense\r\n-------\r\n\r\nShapeshifter is distributed under the terms of the Apache Software License version 2.0. See LICENSE file for more details.\r\n\r\n\r\nAuthors and contributors\r\n------------------------\r\n\r\n* Julien Silland <<jsilland@turn.com>> (Software Engineer at Turn, Inc)  \r\n  Original author, main developer and maintainer\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}